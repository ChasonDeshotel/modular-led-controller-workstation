# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from molecole.proto.perform import perform_service_pb2 as molecole_dot_proto_dot_perform_dot_perform__service__pb2


class PerformanceServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.QueryPerformance = channel.unary_stream(
        '/molecole.proto.perform.PerformanceService/QueryPerformance',
        request_serializer=molecole_dot_proto_dot_perform_dot_perform__service__pb2.QueryPerformanceRequest.SerializeToString,
        response_deserializer=molecole_dot_proto_dot_perform_dot_perform__service__pb2.Performance.FromString,
        )


class PerformanceServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def QueryPerformance(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_PerformanceServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'QueryPerformance': grpc.unary_stream_rpc_method_handler(
          servicer.QueryPerformance,
          request_deserializer=molecole_dot_proto_dot_perform_dot_perform__service__pb2.QueryPerformanceRequest.FromString,
          response_serializer=molecole_dot_proto_dot_perform_dot_perform__service__pb2.Performance.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'molecole.proto.perform.PerformanceService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
